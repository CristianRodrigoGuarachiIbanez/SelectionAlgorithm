#!/usr/bin/env python3

from bpy.props import StringProperty

from bmesh.types import BMElemSeq, BMEdgeSeq, BMFaceSeq, BMVertSeq
from bmesh.types import BMVert, BMEdge, BMFace, BMesh, BMLoop
from bpy import context
from bpy.types import Object, Operator, Panel, ID
from bmesh import from_edit_mesh, update_edit_mesh
from typing import List, Tuple, Dict, Any, TypeVar, Generator, Callable, Set, DefaultDict
from collections import defaultdict
from mathutils import Vector
from logging import info, INFO
from state import StateEdge
from math import pi
from numpy import ndarray, asarray, abs as absolut, array
from os.path import dirname, join, expanduser, normpath, realpath
from os import getcwd
import sys
import bpy


class SelectionModesManager(Operator):
    bl_idname: str = 'mesh.text';
    bl_label: str = 'show text';
    bl_options: Set[str] = {'REGISTER', 'UNDO'};
    def __init__(self) -> None:
        self.__obj: Object = context.object;
        self.__bm: BMesh;
        self.__selectedEdges: List[BMEdgeSeq] = list();
        #self.__selectedFaces: List[BMElemSeq] = list(); # save the faces
        self.__extendedNodes: DefaultDict[BMVert, StateEdge] = defaultdict(StateEdge);
        self.__angles: List[float] = list()

    def __getEdges(self) -> List[BMEdgeSeq]:
        return self.__selectedEdges

    def __addEdges(self, key: BMVert, value:BMEdge) -> None:
        self.__extendedNodes[key] = value;

    def __deleteAllEdges(self) -> None:
        self.__extendedNodes.clear()

    def calculateFacesAngle(self) -> None:
        pass

    def __gatherElementSequences(self) -> None:
        #bm: BMesh
        length: int;
        if (self.__obj.mode == 'EDIT'):
            self.__bm = from_edit_mesh(self.__obj.data)
            length = len(self.__bm.edges)
            # print(length)
            # for i, v in enumerate(bm.verts):
            assert(length <=3), "there could be more than 3 Edges selected"
            for i in range(length):
                # print('Nicht selected edges: {}'.format(bm.edges[i]))
                if (self.__bm.edges[i].select):
                    print('selected edges: {}'.format(self.__bm.edges[i]))
                    self.__selectedEdges.append(self.__bm.edges[i])
        else:
            print("Object is not in edit mode.")

    def __selectNextEdge(self, EDGE:BMEdge, NEXTEDGES:List[BMEdge]) -> BMEdge:
        """
        iterate over the list of children excluding the edges that not meet the one/two criteria
        :param EDGE: the selected edge
        :param: NEXTEDGES: list of Edges connected to the current vertex to iterate over
        :return: BMEdge
        """
        currEdge: BMEdge = EDGE#
        edgeLength:float = currEdge.calc_length();
        info('current Edge: {}, current edge index: {}'.format( currEdge, currEdge.index))
        closestEdgeLength:Tuple[BMEdge,float] = self.__getClosestValue(NEXTEDGES, currEdge)

        length: int = len(NEXTEDGES)

        info('target edge length: {}, closest edge length: {}, distance to the target length: {}'.format(edgeLength, closestEdgeLength[0], closestEdgeLength[1]));
        # ---------- this  has to be included in the function getClosestValue ------
        nextEdge: BMEdge
        for j in range(length):
            nextEdge = NEXTEDGES.pop(0)
            if(nextEdge == closestEdgeLength[0]):
                info('selected edge length: {}, value of the selected edge length: {}'.format(closestEdgeLength[0], closestEdgeLength[1]));
                return nextEdge
            else:
                print('delete edge {} and size of the children edges {}'.format(nextEdge, len(NEXTEDGES)))


    def __getClosestValue(self, nextEdges:List[BMEdge], currEdge:BMEdge) -> Tuple[BMEdge, float]:

        closestEdge:BMEdge = nextEdges[0];#
        closestValue: float = self.__getDistanceBetweenEdges(currEdge.calc_length(),  closestEdge.calc_length());
        nextLength:float;
        nextEdge:BMEdge;
        for i in range(1, len(nextEdges)):
            nextEdge = nextEdges[i]
            nextLength = self.__getDistanceBetweenEdges(currEdge.calc_length(), nextEdge.calc_length());
            if(nextLength < closestValue):
                closestValue = nextLength;
                closestEdge = nextEdge;
        return closestEdge, closestValue

    def __excludeDuplicates(self) -> List[int]:
        i:int;
        currIndex:int
        indices:List[BMEdge] = list();
        if (len(self.__selectedEdges)==1):
            return list(self.__selectedEdges[0].index)
        elif(len(self.__selectedEdges)<1):
            print('the list ist empty')
        for i in range(len(self.__selectedEdges)):
            indices.append(self.__selectedEdges[i].index) # saves the indices
        return list(set(indices)) # removes the duplicates


    def __constructEdgePath(self) -> Tuple[DefaultDict, List[BMEdge]]:

        start: int = 0;
        visited: List[int] = self.__excludeDuplicates() # list of edge indices [False] * len(self.__selectedEdges)
        queue: BMEdge;
        nextEdge:BMEdge;
        # -------- clear dict EXTENDED NODES
        self.__deleteAllEdges()
        # ------------ declare and define StateEdges
        searchingPath:StateEdge = StateEdge(None,self.__selectedEdges[0]);
        # ------ create children-edges
        searchingPath.createChildrenEdges();
        # ------ save the status in EXTENDED NODES
        self.__extendedNodes[0] = searchingPath;

        while(len(self.__selectedEdges)>0): # endlose Schleife
            queue = self.__selectedEdges[start]
            # ------ look for the next edge and save in selectedEdges
            nextEdge = self.__selectNextEdge(queue, searchingPath.children);
            self.__selectedEdges.append(nextEdge)
            print('a new EDGE was selected and added into SELECTED EDGES!');
            if(nextEdge.index not in visited):
                visited.append(nextEdge.index)
            else:
                start+=1;
                continue
            # ------- save the last node, action and children into the class itself
            searchingPath = StateEdge(searchingPath, nextEdge);
            # ------ create children-edges
            searchingPath.createChildrenEdges();
            # -------- save the status in Graph
            self.__extendedNodes[start] = searchingPath;
            print('a new OBJECT CLASS STATUS was added into the list of EXTENDED NODES!');

            start+=1;
            if (start == 3):
                return self.__extendedNodes, self.__selectedEdges



    @staticmethod
    def __searchTheClosestValue(lengthValues: List[float], targetDistanceValue: float = 0.0) -> float:
        return lengthValues[min(range(len(lengthValues)), key=lambda i: abs(lengthValues[i] - targetDistanceValue))]

    @staticmethod
    def __getDistanceBetweenEdges(currEdge: float, nextEdge:float) -> float:
        return abs(currEdge - nextEdge);

    def __activeEdgesEDITMODE(self, edges:List[BMEdge]) -> None:
        #bm: BMesh = from_edit_mesh(self.__obj.data);
        i:int;
        currEdge:BMEdge;

        for i in range(len(edges)):
            currEdge = edges[i];
            currEdge.select=True;

        self.__bm.select_history.clear()
        self.__bm.select_history.add(currEdge)

        update_edit_mesh(self.__obj.data)


    def execute(self, context) -> Set[str]:
        self.__selectedEdges.clear();
        self.__gatherElementSequences();
        self.__collectSurroundingEdges();
        try:
            context.scene.long_string = 'values here:{}'.format(len(self.__selectedFaces))
            #context.scene.long_string = 'value 2 here: {}'.format(self.getEdges()[0].calc_length())
            return {'FINISHED'}
        except Exception as e:
            self.report({'ERROR'}, e.args)
            return {'CANCELLED'}

class PANEL_PT_SelectionTools(Panel):
    bl_idname: str = 'PANEL_PT_SelectionTools'
    bl_label: str = 'Selection_Tools'
    bl_space_type: str = 'VIEW_3D'
    bl_region_type: str = 'UI'
    bl_category: str = 'Panel Selection Tools'

    def draw(self, context) -> None:
        row_action_1_btn = self.layout.row()
        row_action_1_btn.operator('mesh.text', icon='WORLD_DATA', text='Print Values')

        # Text area
        row_text = self.layout.row()
        text = context.scene.long_string
        row_text.label(text=text, icon='WORLD_DATA')



bl_info: Dict[str, str] = {
    "name": "Textbox",
    "author": "cristguarachi@gmail.com",
    "version": (0, 0, 1),
    "blender": (2, 80, 0),
    "location": "View3D",
    "description": "Selection Tools Addon",
    "category": "Development",
}


def register() -> None:
    bpy.utils.register_class(SelectionModesManager)
    bpy.utils.register_class(PANEL_PT_SelectionTools)
    bpy.types.Scene.long_string = StringProperty(name='long_string', default='')


def unregister() -> None:
    bpy.utils.unregister_class(SelectionModesManager)
    bpy.utils.unregister_class(PANEL_PT_SelectionTools)
    del bpy.types.Scene.long_string


if __name__ == "__main__":
    register()
